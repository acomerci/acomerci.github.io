{"version":3,"sources":["logo.svg","tileData.js","Projects.js","Clock.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","tileData","img","title","author","cols","featured","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","icon","color","li","listStyleType","width","TitlebarGridList","classes","react_default","a","createElement","className","Grid","container","spacing","map","tile","key","item","sm","md","GridListTile","src","alt","GridListTileBar","subtitle","actionIcon","IconButton","aria-label","concat","Info_default","Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","_this2","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","React","Component","TabPanel","children","value","index","other","objectWithoutProperties","Typography","assign","component","role","hidden","id","aria-labelledby","Box","a11yProps","aria-controls","flexGrow","backgroundColor","palette","background","paper","App","useTheme","_React$useState","useState","_React$useState2","slicedToArray","setValue","AppBar","position","Tabs","onChange","event","newValue","centered","Tab","label","lib_default","axis","direction","onChangeIndex","dir","src_Clock","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e54a7823.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const tileData = [\r\n    {\r\n      img: '/images/breakfast.jpg',\r\n      title: 'Breakfast',\r\n      author: 'jill111',\r\n      cols: 2,\r\n      featured: true,\r\n    },\r\n    {\r\n      img: '/images/burgers.jpg',\r\n      title: 'Tasty burger',\r\n      author: 'director90',\r\n    },\r\n    {\r\n      img: '/images/camera.jpg',\r\n      title: 'Camera',\r\n      author: 'Danson67',\r\n    },\r\n    {\r\n      img: '/images/morning.jpg',\r\n      title: 'Morning',\r\n      author: 'fancycrave1',\r\n      featured: true,\r\n    },\r\n    {\r\n      img: '/images/hats.jpg',\r\n      title: 'Hats',\r\n      author: 'Hans',\r\n    },\r\n    {\r\n      img: '/images/honey.jpg',\r\n      title: 'Honey',\r\n      author: 'fancycravel',\r\n    },\r\n    {\r\n      img: '/images/vegetables.jpg',\r\n      title: 'Vegetables',\r\n      author: 'jill111',\r\n      cols: 2,\r\n    },\r\n    {\r\n      img: '/images/plant.jpg',\r\n      title: 'Water plant',\r\n      author: 'BkrmadtyaKarki',\r\n    },\r\n    {\r\n      img: '/images/mushroom.jpg',\r\n      title: 'Mushrooms',\r\n      author: 'PublicDomainPictures',\r\n    },\r\n    {\r\n      img: '/images/olive.jpg',\r\n      title: 'Olive oil',\r\n      author: 'congerdesign',\r\n    },\r\n    {\r\n      img: '/images/star.jpg',\r\n      title: 'Sea star',\r\n      cols: 2,\r\n      author: '821292',\r\n    },\r\n    {\r\n      img: '/images/bike.jpg',\r\n      title: 'Bike',\r\n      author: 'danfador',\r\n    },\r\n  ];\r\n  \r\n  export default tileData;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport tileData from './tileData';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n    },\r\n    icon: {\r\n        color: 'rgba(255, 255, 255, 0.54)',\r\n    },\r\n    li: {\r\n        listStyleType: 'none',\r\n    },\r\n    img: {\r\n        width: '100%',\r\n    }\r\n}));\r\n\r\nexport default function TitlebarGridList() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n                {tileData.map(tile => (\r\n                    <Grid key={tile.img} item sm={12} md={6}>\r\n                        <GridListTile className={classes.li}>\r\n                            <img src={tile.img} alt={tile.title} className={classes.img} />\r\n                            <GridListTileBar\r\n                                title={tile.title}\r\n                                subtitle={<span>by: {tile.author}</span>}\r\n                                actionIcon={\r\n                                    <IconButton aria-label={`info about ${tile.title}`} className={classes.icon}>\r\n                                        <InfoIcon />\r\n                                    </IconButton>\r\n                                }\r\n                            />\r\n                        </GridListTile>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { date: new Date() };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    tick() {\r\n        this.setState({\r\n            date: new Date()\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Son las {this.state.date.toLocaleTimeString()}</h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport SwipeableViews from 'react-swipeable-views';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport TitlebarGridList from './Projects';\nimport Clock from './Clock.js';\n\nfunction App() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [value, setValue] = React.useState(0);\n\n  function handleChange(event, newValue) {\n    setValue(newValue);\n  }\n\n  function handleChangeIndex(index) {\n    setValue(index);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppBar position=\"static\">\n        <Tabs value={value} onChange={handleChange} centered>\n          <Tab label=\"Bienvenida\" {...a11yProps(0)} />\n          <Tab label=\"Hora\" {...a11yProps(1)} />\n          <Tab label=\"Proyectos\" {...a11yProps(2)} />\n        </Tabs>\n      </AppBar>\n      <SwipeableViews\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n        index={value}\n        onChangeIndex={handleChangeIndex}\n      >\n        <TabPanel value={value} index={0} dir={theme.direction}>\n          <img src=\"https://media.tenor.com/images/2e2f908309dd8a576d1193506c16f147/tenor.gif\" className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Mir&aacute;, tengo una p&aacute;gina.\n          </p>\n        </TabPanel>\n        <TabPanel value={value} index={1} dir={theme.direction}>\n          <Clock />\n        </TabPanel>\n        <TabPanel value={value} index={2} dir={theme.direction}>\n          <TitlebarGridList />\n        </TabPanel>\n      </SwipeableViews>\n      </header>\n    </div>\n  );\n}\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}