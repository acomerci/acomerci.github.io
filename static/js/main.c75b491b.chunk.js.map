{"version":3,"sources":["tileData.js","Projects.js","App.js","serviceWorker.js","index.js"],"names":["tileData","img","title","client","featured","cols","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","welcome","height","gridContainer","margin","titlePositionBottom","bottom","icon","color","li","listStyleType","width","TitlebarGridList","classes","_useState","useState","_useState2","Object","slicedToArray","scroll","setScroll","_useState3","_useState4","scrollItems","setScrollItems","getGrow","id","item","find","si","grow","getViewportHeight","Math","max","document","documentElement","clientHeight","window","innerHeight","useEffect","onScrollOrResize","pageYOffset","scrollTop","clientTop","addEventListener","removeEventListener","elemScroll","elems","getElementsByName","i","length","elem","scrollItem","console","log","push","offsetTop","react_default","a","createElement","className","Box","alignItems","css","Typography","variant","component","Grid","container","spacing","map","tile","index","key","sm","md","Grow","in","timeout","GridListTile","name","src","alt","GridListTileBar","subtitle","actionIcon","IconButton","aria-label","concat","Info_default","App","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c75b491b.chunk.js","sourcesContent":["const tileData = [\r\n    {\r\n      img: '/images/breakfast.jpg',\r\n      title: 'Pagos en Sucursal',\r\n      client: 'BBVA',\r\n      featured: true,\r\n    },\r\n    {\r\n      img: '/images/burgers.jpg',\r\n      title: 'Tasty burger',\r\n      client: 'director90',\r\n    },\r\n    {\r\n      img: '/images/camera.jpg',\r\n      title: 'Camera',\r\n      client: 'Danson67',\r\n    },\r\n    {\r\n      img: '/images/morning.jpg',\r\n      title: 'Morning',\r\n      client: 'fancycrave1',\r\n      featured: true,\r\n    },\r\n    {\r\n      img: '/images/hats.jpg',\r\n      title: 'Hats',\r\n      client: 'Hans',\r\n    },\r\n    {\r\n      img: '/images/honey.jpg',\r\n      title: 'Honey',\r\n      client: 'fancycravel',\r\n    },\r\n    {\r\n      img: '/images/vegetables.jpg',\r\n      title: 'Vegetables',\r\n      client: 'jill111',\r\n      cols: 2,\r\n    },\r\n    {\r\n      img: '/images/plant.jpg',\r\n      title: 'Water plant',\r\n      client: 'BkrmadtyaKarki',\r\n    },\r\n    {\r\n      img: '/images/mushroom.jpg',\r\n      title: 'Mushrooms',\r\n      client: 'PublicDomainPictures',\r\n    },\r\n    {\r\n      img: '/images/olive.jpg',\r\n      title: 'Olive oil',\r\n      client: 'congerdesign',\r\n    },\r\n    {\r\n      img: '/images/star.jpg',\r\n      title: 'Sea star',\r\n      cols: 2,\r\n      client: '821292',\r\n    },\r\n    {\r\n      img: '/images/bike.jpg',\r\n      title: 'Bike',\r\n      client: 'danfador',\r\n    },\r\n  ];\r\n  \r\n  export default tileData;","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport tileData from './tileData';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n    },\r\n    welcome: {\r\n        height: 'calc(100vh + 53px)',\r\n    },\r\n    gridContainer: {\r\n        margin: '0',\r\n    },\r\n    titlePositionBottom: {\r\n        bottom: '7px',\r\n    },\r\n    icon: {\r\n        color: 'rgba(255, 255, 255, 0.54)',\r\n    },\r\n    li: {\r\n        listStyleType: 'none',\r\n    },\r\n    img: {\r\n        width: '100%',\r\n    }\r\n}));\r\n\r\nexport default function TitlebarGridList() {\r\n    const classes = useStyles();\r\n\r\n    const [scroll, setScroll] = useState(0);\r\n    const [scrollItems, setScrollItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        function onScrollOrResize() {\r\n            setScroll((window.pageYOffset || document.documentElement.scrollTop) - (document.documentElement.clientTop || 0) +\r\n                getViewportHeight());\r\n        }\r\n\r\n        // onScrollOrResize();\r\n\r\n        window.addEventListener('scroll', onScrollOrResize);\r\n        window.addEventListener('resize', onScrollOrResize);\r\n\r\n        return () => {\r\n            window.removeEventListener('scroll', onScrollOrResize);\r\n            window.removeEventListener('resize', onScrollOrResize);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        var elemScroll = [];\r\n        var elems = document.getElementsByName('scrollGrow');\r\n        for (var i = 0; i < elems.length; i++) {\r\n            var elem = elems[i];\r\n            var scrollItem = scrollItems.find(si => si.id == elem.id);\r\n            var grow = scrollItem ? scrollItem.grow || (scrollItem.scroll > getViewportHeight() && scrollItem.scroll < scroll) : false;\r\n            if (grow)\r\n                console.log(scrollItem.scroll + ' ' + scroll)\r\n            elemScroll.push({ id: elem.id, scroll: elem.offsetTop - elem.scrollTop + elem.clientTop, grow: grow });\r\n        }\r\n\r\n        setScrollItems(elemScroll);\r\n    }, [scroll]);\r\n\r\n    function getGrow(id) {\r\n        var item = scrollItems.find(si => si.id == id);\r\n        // console.log(item);\r\n\r\n        // if (item && !item.scroll) {\r\n        //     item = document.getElementById(id);\r\n        //     console.log(item);\r\n        //     item = { scroll: item.offsetTop - item.scrollTop + item.clientTop };\r\n        // }\r\n\r\n        // console.log(scroll + ': ' + (item ? item.scroll : 0));\r\n        return item && item.grow;\r\n    }\r\n\r\n    function getViewportHeight() {\r\n        return Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Box\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                css={{ height: 'calc(100vh + 53px)' }}\r\n                className={classes.welcome}>\r\n                <Typography variant=\"h1\" component=\"h2\">\r\n                    Hola\r\n                </Typography>\r\n            </Box>\r\n            <Grid\r\n                container\r\n                spacing={3}\r\n                className={classes.gridContainer}>\r\n                {tileData.map((tile, index) => (\r\n                    <Grid key={tile.img} item sm={12} md={6}>\r\n                        <Grow\r\n                            in={getGrow('img_' + index)}\r\n                            timeout={1000}>\r\n                            <GridListTile\r\n                                className={classes.li}\r\n                                id={'img_' + index}\r\n                                name={'scrollGrow'}>\r\n                                <img src={tile.img} alt={tile.title} className={classes.img} />\r\n                                <GridListTileBar\r\n                                    title={tile.title}\r\n                                    subtitle={<span>{tile.client}</span>}\r\n                                    className={classes.titlePositionBottom}\r\n                                    actionIcon={\r\n                                        <IconButton aria-label={`info about ${tile.title}`} className={classes.icon}>\r\n                                            <InfoIcon />\r\n                                        </IconButton>\r\n                                    }\r\n                                />\r\n                            </GridListTile>\r\n                        </Grow>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    );\r\n}","import React from 'react';\n\nimport './App.css';\nimport TitlebarGridList from './Projects';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <AppBar position=\"sticky\">\n        <Tabs value={value} onChange={handleChange} centered>\n          <Tab label=\"Proyectos\" {...a11yProps(0)} />\n          <Tab label=\"Hora\" {...a11yProps(1)} />\n          <Tab label=\"Bienvenida\" {...a11yProps(2)} />\n        </Tabs>\n      </AppBar>\n      <SwipeableViews\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n        index={value}\n        onChangeIndex={handleChangeIndex}\n      >\n      <TabPanel value={value} index={0} dir={theme.direction}> */}\n        <TitlebarGridList />\n      {/* </TabPanel>\n        <TabPanel value={value} index={1} dir={theme.direction}>\n          <Clock />\n        </TabPanel>\n        <TabPanel value={value} index={2} dir={theme.direction}>\n          <img src=\"https://media.tenor.com/images/2e2f908309dd8a576d1193506c16f147/tenor.gif\" className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Mir&aacute;, tengo una p&aacute;gina.\n          </p>\n        </TabPanel>\n      </SwipeableViews> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}