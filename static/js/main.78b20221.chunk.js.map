{"version":3,"sources":["logo.svg","Clock.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","_this2","timerID","setInterval","tick","clearInterval","setState","react_default","a","createElement","toLocaleTimeString","React","Component","TabPanel","children","value","index","other","objectWithoutProperties","Typography","assign","component","role","hidden","id","concat","aria-labelledby","Box","a11yProps","aria-controls","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","App","useTheme","_React$useState","useState","_React$useState2","slicedToArray","setValue","className","AppBar","position","Tabs","onChange","event","newValue","centered","Tab","label","lib_default","axis","direction","onChangeIndex","dir","src","alt","src_Clock","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78b20221.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { date: new Date() };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    tick() {\r\n        this.setState({\r\n            date: new Date()\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Son las {this.state.date.toLocaleTimeString()}</h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport SwipeableViews from 'react-swipeable-views';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport Clock from './Clock.js';\n\nfunction App() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [value, setValue] = React.useState(0);\n\n  function handleChange(event, newValue) {\n    setValue(newValue);\n  }\n\n  function handleChangeIndex(index) {\n    setValue(index);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppBar position=\"static\">\n        <Tabs value={value} onChange={handleChange} centered>\n          <Tab label=\"Bienvenida\" {...a11yProps(0)} />\n          <Tab label=\"Hora\" {...a11yProps(1)} />\n        </Tabs>\n      </AppBar>\n      <SwipeableViews\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n        index={value}\n        onChangeIndex={handleChangeIndex}\n      >\n        <TabPanel value={value} index={0} dir={theme.direction}>\n          <img src=\"https://media.tenor.com/images/2e2f908309dd8a576d1193506c16f147/tenor.gif\" className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Mir&aacute;, tengo una p&aacute;gina.\n          </p>\n        </TabPanel>\n        <TabPanel value={value} index={1} dir={theme.direction}>\n        <Clock />\n        </TabPanel>\n      </SwipeableViews>\n      </header>\n    </div>\n  );\n}\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}